{"ast":null,"code":"const fetchMenteesAndMentors = async () => {\n  try {\n    // Fetch mentee's data\n    const menteeResponse = await fetch(`/api/allmentees/${user.email}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Mentee response:', await menteeResponse.clone().text()); // Log response text\n    if (!menteeResponse.ok) {\n      throw new Error('Failed to fetch mentee data');\n    }\n    const menteeData = await menteeResponse.json();\n    const menteeSkills = menteeData.skills || [];\n    const menteeInterests = menteeData.interests || [];\n\n    // Fetch mentors data\n    const mentorsResponse = await fetch('/api/allmentors', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    console.log('Mentors response:', await mentorsResponse.clone().text()); // Log response text\n    if (!mentorsResponse.ok) {\n      throw new Error('Failed to fetch mentors data');\n    }\n    const mentorsData = await mentorsResponse.json();\n    const allMentors = mentorsData.mentors || [];\n\n    // Find matching mentors\n    const filteredMentors = allMentors.filter(mentor => {\n      const mentorSkills = mentor.profile.skills || [];\n      const mentorExpertise = mentor.profile.expertise || [];\n      const skillsMatch = mentorSkills.some(skill => menteeSkills.includes(skill));\n      const interestsMatch = mentorExpertise.some(expertise => menteeInterests.includes(expertise));\n      return skillsMatch || interestsMatch;\n    });\n    setMentors(allMentors);\n    setSuggestions(filteredMentors);\n  } catch (err) {\n    console.error('Error fetching data:', err);\n    setError('An error occurred while fetching data.');\n  } finally {\n    setLoading(false);\n  }\n};","map":{"version":3,"names":["fetchMenteesAndMentors","menteeResponse","fetch","user","email","method","headers","console","log","clone","text","ok","Error","menteeData","json","menteeSkills","skills","menteeInterests","interests","mentorsResponse","mentorsData","allMentors","mentors","filteredMentors","filter","mentor","mentorSkills","profile","mentorExpertise","expertise","skillsMatch","some","skill","includes","interestsMatch","setMentors","setSuggestions","err","error","setError","setLoading"],"sources":["D:/projects/profilemanagement/MenteePanel/src/components/Forms/MentorSuggestions.jsx"],"sourcesContent":["const fetchMenteesAndMentors = async () => {\r\n    try {\r\n        // Fetch mentee's data\r\n        const menteeResponse = await fetch(`/api/allmentees/${user.email}`, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n        console.log('Mentee response:', await menteeResponse.clone().text()); // Log response text\r\n        if (!menteeResponse.ok) {\r\n            throw new Error('Failed to fetch mentee data');\r\n        }\r\n        const menteeData = await menteeResponse.json();\r\n        const menteeSkills = menteeData.skills || [];\r\n        const menteeInterests = menteeData.interests || [];\r\n\r\n        // Fetch mentors data\r\n        const mentorsResponse = await fetch('/api/allmentors', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n        });\r\n        console.log('Mentors response:', await mentorsResponse.clone().text()); // Log response text\r\n        if (!mentorsResponse.ok) {\r\n            throw new Error('Failed to fetch mentors data');\r\n        }\r\n        const mentorsData = await mentorsResponse.json();\r\n        const allMentors = mentorsData.mentors || [];\r\n\r\n        // Find matching mentors\r\n        const filteredMentors = allMentors.filter(mentor => {\r\n            const mentorSkills = mentor.profile.skills || [];\r\n            const mentorExpertise = mentor.profile.expertise || [];\r\n            const skillsMatch = mentorSkills.some(skill => menteeSkills.includes(skill));\r\n            const interestsMatch = mentorExpertise.some(expertise => menteeInterests.includes(expertise));\r\n            return skillsMatch || interestsMatch;\r\n        });\r\n\r\n        setMentors(allMentors);\r\n        setSuggestions(filteredMentors);\r\n    } catch (err) {\r\n        console.error('Error fetching data:', err);\r\n        setError('An error occurred while fetching data.');\r\n    } finally {\r\n        setLoading(false);\r\n    }\r\n};\r\n"],"mappings":"AAAA,MAAMA,sBAAsB,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACA;IACA,MAAMC,cAAc,GAAG,MAAMC,KAAK,CAAE,mBAAkBC,IAAI,CAACC,KAAM,EAAC,EAAE;MAChEC,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,MAAMP,cAAc,CAACQ,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACtE,IAAI,CAACT,cAAc,CAACU,EAAE,EAAE;MACpB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACA,MAAMC,UAAU,GAAG,MAAMZ,cAAc,CAACa,IAAI,CAAC,CAAC;IAC9C,MAAMC,YAAY,GAAGF,UAAU,CAACG,MAAM,IAAI,EAAE;IAC5C,MAAMC,eAAe,GAAGJ,UAAU,CAACK,SAAS,IAAI,EAAE;;IAElD;IACA,MAAMC,eAAe,GAAG,MAAMjB,KAAK,CAAC,iBAAiB,EAAE;MACnDG,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACFC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE,MAAMW,eAAe,CAACV,KAAK,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACxE,IAAI,CAACS,eAAe,CAACR,EAAE,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACnD;IACA,MAAMQ,WAAW,GAAG,MAAMD,eAAe,CAACL,IAAI,CAAC,CAAC;IAChD,MAAMO,UAAU,GAAGD,WAAW,CAACE,OAAO,IAAI,EAAE;;IAE5C;IACA,MAAMC,eAAe,GAAGF,UAAU,CAACG,MAAM,CAACC,MAAM,IAAI;MAChD,MAAMC,YAAY,GAAGD,MAAM,CAACE,OAAO,CAACX,MAAM,IAAI,EAAE;MAChD,MAAMY,eAAe,GAAGH,MAAM,CAACE,OAAO,CAACE,SAAS,IAAI,EAAE;MACtD,MAAMC,WAAW,GAAGJ,YAAY,CAACK,IAAI,CAACC,KAAK,IAAIjB,YAAY,CAACkB,QAAQ,CAACD,KAAK,CAAC,CAAC;MAC5E,MAAME,cAAc,GAAGN,eAAe,CAACG,IAAI,CAACF,SAAS,IAAIZ,eAAe,CAACgB,QAAQ,CAACJ,SAAS,CAAC,CAAC;MAC7F,OAAOC,WAAW,IAAII,cAAc;IACxC,CAAC,CAAC;IAEFC,UAAU,CAACd,UAAU,CAAC;IACtBe,cAAc,CAACb,eAAe,CAAC;EACnC,CAAC,CAAC,OAAOc,GAAG,EAAE;IACV9B,OAAO,CAAC+B,KAAK,CAAC,sBAAsB,EAAED,GAAG,CAAC;IAC1CE,QAAQ,CAAC,wCAAwC,CAAC;EACtD,CAAC,SAAS;IACNC,UAAU,CAAC,KAAK,CAAC;EACrB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}